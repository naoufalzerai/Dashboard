@namespace WebApp.Component.NAS.FileExplorer

@using WebApp.Component.Utils
@using Entities.Entity
@using BL.SMB
@using WebApp.State
@using BL.GlobalParameters
@implements IDisposable
@inject FileManagerState _fileManagerState
@inject IGlobalParameters _globalParameters


<div class="liste-wrap">
    <div class="d-grid gap-2">
        <button @onclick="() => Modal.Open()" type="button" class="btn btn-primary btn mb-2 bg-primary-gradient">
            <i class="bi-plus-circle-fill"></i> Add
        </button>

        <div class="btn-group-vertical" role="group">

            @foreach (SmbConfiguration s in _sources)
            {
                <div class="btn-group me-2" aria-label="First group">
                 
                    <button class="btn btn-outline-primary" @onclick="() => _fileManagerState.Property = s">
                        <i class="bi-hdd-network-fill"></i> @s.Address.Replace('\\', ' ')
                    </button>
                    <button class="btn btn-outline-danger" @onclick="Remove">
                        <i class="bi-x-circle-fill click"></i>
                    </button>
                </div>
            }
        </div>
    </div>
    <Modal @ref="Modal" ParentSave="@SaveSource" Title="New SMB">
        <input class="form-control mb-2" type="url" placeholder="Server" @bind="_address">
        <input class="form-control mb-2" type="text" placeholder="Username" @bind="_username">
        <input class="form-control mb-2" type="text" placeholder="Password" @bind="_password">
    </Modal>
</div>

@code {
    private Modal Modal { get; set; } = null!;
    private List<SmbConfiguration> _sources { get; set; } = null!;

    private string? _address { get; set; }
    private string? _password { get; set; }
    private string? _username { get; set; }

    private void SaveSource()
    {
        var smbConfiguration = new SmbConfiguration
        {
            Address = _address,
            Password = _password??"",
            Username = _username??""
        };
        _globalParameters.AddNewSmbConfig(smbConfiguration);
        _address = _password = _username = "";
    }

    private void Remove()
    {
        Console.WriteLine("testr");
    }

    protected override async Task OnInitializedAsync()
    {
        var tmp = await _globalParameters.GetSmbConfig();
        _sources = tmp.ToList();
        _fileManagerState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        _fileManagerState.OnChange -= StateHasChanged;
    }

}