@namespace WebApp.Component.NAS.FileExplorer

@using WebApp.Component.Utils
@using Entities.Entity
@using BL.SMB
@using WebApp.State
@using BL.GlobalParameters
@implements IDisposable
@inject FileManagerState _fileManagerState
@inject IGlobalParameters _globalParameters


<div>
    <div class="d-grid gap-2">
        <button @onclick="() => Modal.Open()" type="button" class="btn btn-primary btn mb-2">
            <i class="bi-plus-circle-fill"></i> Add
        </button>
    </div>
    <ul class="list-group">

        @foreach (SmbConfiguration s in _sources)
        {
            <button class="list-group-item list-group-item-action" @onclick="()=>_fileManagerState.Property=s">
                <i class="bi-hdd-network-fill"></i> @s.Address.Replace('\\',' ')
            </button>
        }
    </ul>
    <Modal @ref="Modal" ParentSave="@SaveSource">
        <input type="url" @bind="_address">
        <input type="url" @bind="_password">
        <input type="url" @bind="_username">
    </Modal>
</div>
@code {
    private Modal Modal { get; set; } = null!;
    private List<SmbConfiguration> _sources = new List<SmbConfiguration>(){
    new SmbConfiguration(){
    Address=@"\\meganas.local",
    Username="",
    Password=""
    },
    new SmbConfiguration{
    Address=@"\\mega"
    }
    };

    private string? _address { get; set; }
    private string? _password { get; set; }
    private string? _username { get; set; }

    private void SaveSource()
    {
        var smbConfiguration = new SmbConfiguration
        {
            Address = _address,
            Password = _password,
            Username = _username
        };
        _address = _password = _username = "";
    }


    protected override async Task OnInitializedAsync()
    {
        var tmp = await _globalParameters.GetSmbConfig();
        _sources = tmp.ToList();
        _fileManagerState.OnChange += StateHasChanged;
    }
    public void Dispose()
    {
        _fileManagerState.OnChange -= StateHasChanged;
    }

}