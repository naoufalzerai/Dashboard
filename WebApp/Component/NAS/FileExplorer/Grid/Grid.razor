@namespace WebApp.Component.NAS.FileExplorer
@using Entities.Entity
@using Entities.Model.NAS
@using WebApp.State
@using BL.SMB;
@implements IDisposable
@inject FileManagerState _fileManagerState
@inject ISmbServices _smbServices

<div>

    <input class="path-input form-control" list="path" value="@_fileManagerState.Property.Address" @onchange="(e)=>UpdateSource(e.Value?.ToString())">
    <datalist id="path">
        @if (files is not null)
        {
            @foreach (var f in files.Select(f => f.Path))
            {
                <option>@f</option>
            }
        }
    </datalist>
    <div class="flex">
        <i class="bi bi-arrow-up-square-fill click" @onclick="Up"></i>
        <i class="bi bi-house-fill click" @onclick="Home"></i>
        <i class="bi bi-back click"></i>
        <i class="bi bi-input-cursor-text click"></i>
        <i class="bi bi-trash3-fill click"></i>
    </div>
    <div class="grid">
        <div>
            <input type="checkbox" name="" id="" @onchange="SelectAll">
        </div>
        <div>File</div>
        <div>Created</div>
        <div>Updated</div>
        <div>Size</div>
        @if (files is not null)
        {
            @foreach (FileModel f in files)
            {
                <div>
                    <input type="checkbox" @bind="f.IsSelected">
                </div>
                <div class="click">
                    <i class="@f.Type.Icon()"></i>
                    @if (f.IsFolder)
                    {
                        <a @onclick="() => UpdateSource(f.Path!)">@f.Name</a>
                    }
                    else
                    {
                        @f.Name
                    }
                </div>
                <div>@f.CreateDate.ToShortDateString()</div>
                <div>@f.UpdateDate.ToShortDateString()</div>
                <div>@f.Size</div>
            }
        }
    </div>
</div>

@code {

    bool IsSelectAll = false;

    public List<FileModel> files { get; set; }

    void SelectAll()
    {
        IsSelectAll = !IsSelectAll;
        files.ForEach(f => f.IsSelected = IsSelectAll);
    }

    protected override async void OnInitialized()
    {
        _fileManagerState.OnChange += UpdateSource;
    }

    public void Dispose()
    {
        _fileManagerState.OnChange -= UpdateSource;
    }

    private async void UpdateSource()
    {
        var tmp = await _smbServices.GetFilesAsync(_fileManagerState.Property);
        files = tmp.ToList();
        StateHasChanged();
    }

    private void Up()
    {
        if (_fileManagerState.Property.Address.Split('\\').Length > 3)
            _fileManagerState.Property = new SmbConfiguration()
            {
                Address = string.Join('\\', _fileManagerState.Property.Address.Split('\\')[0..^1]),
                Password = _fileManagerState.Property.Password,
                Username = _fileManagerState.Property.Username
            };
    }

    private void Home()
    {
        if (_fileManagerState.Property.Address.Split('\\').Length > 3)
        _fileManagerState.Property = new SmbConfiguration()
        {
            Address = string.Format($"\\\\{_fileManagerState.Property.Address.Split('\\')[2]}"),
            Password = _fileManagerState.Property.Password,
            Username = _fileManagerState.Property.Username
        };
    }
    private void UpdateSource(string folder)
    {
        _fileManagerState.Property = new SmbConfiguration()
        {
            Address = $"\\\\{folder}",
            Password = _fileManagerState.Property.Password,
            Username = _fileManagerState.Property.Username
        };
    }

}